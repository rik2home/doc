#include <iostream>
#include <time.h>
#include "ConsoleLib.h"
#include <conio.h>

using namespace std;

void Initialize_Leve_l(char a_board[8][8], int size_y, int size_x)
{
	const char a_Initial[8][8] =
	{
		{ '*', '*', '*', '*', '*', ' ', ' ', ' ' },
		{ '*', ' ', ' ', ' ', '*', ' ', ' ', ' ' },
		{ '*', ' ', 35, ' ', '*', ' ', ' ', ' ' },
		{ '*', ' ', ' ', ' ', '*', ' ', ' ', ' ' },
		{ '*', ' ', 38, ' ', '*', ' ', ' ', ' ' },
		{ '*', ' ', 35, ' ', '*', ' ', ' ', ' ' },
		{ '*', ' ', ' ', ' ', '*', ' ', ' ', ' ' },
		{ '*', '*', '*', '*', '*', ' ', ' ', ' ' }

		//{ '*', '*', '*', '*', ' ', ' ', ' ', ' ' },
		//{ '*', 38, 249, '*', ' ', ' ', ' ', ' ' },
		//{ '*', ' ', ' ', '*', ' ', ' ', ' ', ' ' },
		//{ '*', 219, ' ', '*', ' ', ' ', ' ', ' ' },
		//{ '*', ' ', 219, '*', ' ', ' ', ' ', ' ' },
		//{ '*', 249, ' ', '*', ' ', ' ', ' ', ' ' },
		//{ '*', ' ', ' ', '*', ' ', ' ', ' ', ' ' },
		//{ '*', '*', '*', '*', ' ', ' ', ' ', ' ' }

	};

	for (int y = 0; y < size_y; y++)
		for (int x = 0; x < size_x; x++)
			a_board[y][x] = a_Initial[y][x];
}

void print_char(char a_board[8][8])
{
	GotoXY(2, 2);
	cout << a_board[0][0];
	GotoXY(2, 5);
	cout << a_board[1][0];
	GotoXY(2, 8);
	cout << a_board[2][0];
	GotoXY(2, 11);
	cout << a_board[3][0];
	GotoXY(2, 14);
	cout << a_board[4][0];
	GotoXY(2, 17);
	cout << a_board[5][0];
	GotoXY(2, 20);
	cout << a_board[6][0];
	GotoXY(2, 23);
	cout << a_board[7][0];


	GotoXY(6, 2);
	cout << a_board[0][1];
	GotoXY(6, 5);
	cout << a_board[1][1];
	GotoXY(6, 8);
	cout << a_board[2][1];
	GotoXY(6, 11);
	cout << a_board[3][1];
	GotoXY(6, 14);
	cout << a_board[4][1];
	GotoXY(6, 17);
	cout << a_board[5][1];
	GotoXY(6, 20);
	cout << a_board[6][1];
	GotoXY(6, 23);
	cout << a_board[7][1];


	GotoXY(10, 2);
	cout << a_board[0][2];
	GotoXY(10, 5);
	cout << a_board[1][2];
	GotoXY(10, 8);
	cout << a_board[2][2];
	GotoXY(10, 11);
	cout << a_board[3][2];
	GotoXY(10, 14);
	cout << a_board[4][2];
	GotoXY(10, 17);
	cout << a_board[5][2];
	GotoXY(10, 20);
	cout << a_board[6][2];
	GotoXY(10, 23);
	cout << a_board[7][2];

	GotoXY(14, 2);
	cout << a_board[0][3];
	GotoXY(14, 5);
	cout << a_board[1][3];
	GotoXY(14, 8);
	cout << a_board[2][3];
	GotoXY(14, 11);
	cout << a_board[3][3];
	GotoXY(14, 14);
	cout << a_board[4][3];
	GotoXY(14, 17);
	cout << a_board[5][3];
	GotoXY(14, 20);
	cout << a_board[6][3];
	GotoXY(14, 23);
	cout << a_board[7][3];

	GotoXY(18, 2);
	cout << a_board[0][4];
	GotoXY(18, 5);
	cout << a_board[1][4];
	GotoXY(18, 8);
	cout << a_board[2][4];
	GotoXY(18, 11);
	cout << a_board[3][4];
	GotoXY(18, 14);
	cout << a_board[4][4];
	GotoXY(18, 17);
	cout << a_board[5][4];
	GotoXY(18, 20);
	cout << a_board[6][4];
	GotoXY(18, 23);
	cout << a_board[7][4];

	GotoXY(22, 2);
	cout << a_board[0][5];
	GotoXY(22, 5);
	cout << a_board[1][5];
	GotoXY(22, 8);
	cout << a_board[2][5];
	GotoXY(22, 11);
	cout << a_board[3][5];
	GotoXY(22, 14);
	cout << a_board[4][5];
	GotoXY(22, 17);
	cout << a_board[5][5];
	GotoXY(22, 20);
	cout << a_board[6][5];
	GotoXY(22, 23);
	cout << a_board[7][5];

	GotoXY(26, 2);
	cout << a_board[0][6];
	GotoXY(26, 5);
	cout << a_board[1][6];
	GotoXY(26, 8);
	cout << a_board[2][6];
	GotoXY(26, 11);
	cout << a_board[3][6];
	GotoXY(26, 14);
	cout << a_board[4][6];
	GotoXY(26, 17);
	cout << a_board[5][6];
	GotoXY(26, 20);
	cout << a_board[6][6];
	GotoXY(26, 23);
	cout << a_board[7][6];

	GotoXY(30, 2);
	cout << a_board[0][7];
	GotoXY(30, 5);
	cout << a_board[1][7];
	GotoXY(30, 8);
	cout << a_board[2][7];
	GotoXY(30, 11);
	cout << a_board[3][7];
	GotoXY(30, 14);
	cout << a_board[4][7];
	GotoXY(30, 17);
	cout << a_board[5][7];
	GotoXY(30, 20);
	cout << a_board[6][7];
	GotoXY(30, 23);
	cout << a_board[7][7];

}

void Find_38(int &gps_y, int &gps_x, char a_board[8][8])
{
	for (int y = 0; y < 8; y++)
	{
		for (int x = 0; x < 8; x++)
		if (a_board[y][x] == 38)
		{
			gps_y = y;
			gps_x = x;
		}
	}
}

void Find_35(int &gps_y_1, int &gps_x_1, int &gps_y_2, int &gps_x_2, char a_board[8][8])
{
	int first = 0;

	for (int y = 0; y < 8; y++)
	{
		for (int x = 0; x < 8; x++)
			if (a_board[y][x] == 35 && first == 0)
			{
				gps_y_1 = y;
				gps_x_1 = x;
				first++;
			}
			else if (a_board[y][x] == 35 && first == 1)
			{
				gps_y_2 = y;
				gps_x_2 = x;
			}

	}
	GotoXY(0, 32);

	cout << "a_board[y][x] Find_1 : " << a_board[gps_y_1][gps_x_1] << "y1 = " << gps_y_1 << " x1 = " << gps_x_1 << endl;
	cout << "a_board[y][x] Find_2 : " << a_board[gps_y_2][gps_x_2] << "y2 = " << gps_y_2 << " x2 = " << gps_x_2 << endl;


}


int Go(char a_board[8][8], int &sum_step)
{

	const int Esc = 27, Up = 119, Down = 115, Right = 100, Left = 97;
	int code;
	int gps_x_38, gps_y_38;
	int gps_x_35_1, gps_y_35_1;
	int gps_x_35_2, gps_y_35_2;

	Find_38(gps_y_38, gps_x_38, a_board);
	Find_35(gps_y_35_1, gps_x_35_1, gps_y_35_2, gps_x_35_2, a_board);

	int new_place_gps_x_38 = gps_x_38;
	int new_place_gps_y_38 = gps_y_38;

	int new_place_kub_x_35_1 = gps_x_35_1;
	int new_place_kub_y_35_1 = gps_y_35_1;

	int new_place_kub_x_35_2 = gps_x_35_2;
	int new_place_kub_y_35_2 = gps_y_35_2;

	code = _getch();
	switch (code)
	{
	case Up:
	{
		new_place_gps_y_38 = gps_y_38 - 1;

		if ((new_place_gps_y_38 == gps_y_35_1) && (new_place_gps_x_38 == gps_x_35_1))
			new_place_kub_y_35_1 = gps_y_35_1 - 1;

		if ((new_place_gps_y_38 == gps_y_35_2) && (new_place_gps_x_38 == gps_x_35_2))
			new_place_kub_y_35_2 = gps_y_35_2 - 1;

		break;
	}
	case Down:
	{
		new_place_gps_y_38 = gps_y_38 + 1;

		if ((new_place_gps_y_38 == gps_y_35_1) && (new_place_gps_x_38 == gps_x_35_1))
			new_place_kub_y_35_1 = gps_y_35_1 + 1;

		if ((new_place_gps_y_38 == gps_y_35_2) && (new_place_gps_x_38 == gps_x_35_2))
			new_place_kub_y_35_2 = gps_y_35_2 + 1;
		break;
	}
	case Right:
	{
		new_place_gps_x_38 = gps_x_38 + 1;

		if ((new_place_gps_y_38 == gps_y_35_1) && (new_place_gps_x_38 == gps_x_35_1))
			new_place_kub_x_35_1 = gps_x_35_1 + 1;

		if ((new_place_gps_y_38 == gps_y_35_2) && (new_place_gps_x_38 == gps_x_35_2))
			new_place_kub_x_35_2 = gps_x_35_2 + 1;
		break;
	}
	case Left:
	{
		new_place_gps_x_38 = gps_x_38 - 1;

		if ((new_place_gps_y_38 == gps_y_35_1) && (new_place_gps_x_38 == gps_x_35_1))
			new_place_kub_x_35_1 = gps_x_35_1 - 1;

		if ((new_place_gps_y_38 == gps_y_35_2) && (new_place_gps_x_38 == gps_x_35_2))
			new_place_kub_x_35_2 = gps_x_35_2 - 1;
		break;
	}
	}

	if (a_board[new_place_gps_y_38][new_place_gps_x_38] != '*' && // двигаем только по пустому месту
		a_board[new_place_gps_y_38][new_place_gps_x_38] != '#')
	{
		a_board[gps_y_38][gps_x_38] = ' ';
		a_board[new_place_gps_y_38][new_place_gps_x_38] = 38;

		sum_step++;
	}
	
	if (a_board[new_place_gps_y_38][new_place_gps_x_38] == '#' && // двигаем ящики без проверки наезда друг на друга не давая выехать за пределы поля
		a_board[new_place_kub_y_35_1][new_place_kub_x_35_1] != '*' &&
		a_board[new_place_kub_y_35_2][new_place_kub_x_35_2] != '*')
	
	{
		a_board[new_place_kub_y_35_1][new_place_kub_x_35_1] = 35;
		a_board[new_place_kub_y_35_2][new_place_kub_x_35_2] = 35;

		a_board[gps_y_38][gps_x_38] = ' ';
		a_board[new_place_gps_y_38][new_place_gps_x_38] = 38;

		sum_step++;
	}


	return code;
}

void main()
{
	srand((unsigned)time(0));
	int const size_y = 8;
	int const size_x = 8;
	char a_board[size_y][size_x]
	{
		{ ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
		{ ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
		{ ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
		{ ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
		{ ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
		{ ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
		{ ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
		{ ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }
	};

	const int Esc = 27;
	int code;

	int size_big = 34;
	int size_lit = 4;
	int sum_step = 00;

	ShowCursor(false);
	Initialize_Leve_l(a_board, size_y, size_x);
	print_char(a_board);

	do
	{
		code = Go(a_board, sum_step);
		print_char(a_board);

	} while (code != Esc);

	GotoXY(0, 36);


}